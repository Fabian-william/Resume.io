<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Resume.io</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    <!-- Libraries for Cropping and Word Export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://unpkg.com/html-docx-js/dist/html-docx.js"></script>

    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .accordion-content { transition: max-height 0.5s ease-in-out, opacity 0.5s ease-in-out; max-height: 0; opacity: 0; overflow: hidden; }
        .accordion-content.open { max-height: 2000px; opacity: 1; }
        .accordion-chevron { transition: transform 0.3s ease-in-out; }
        .accordion-chevron.rotate-180 { transform: rotate(180deg); }
        .quick-select-btn { cursor: pointer; }
        /* Cropper Modal Styles */
        #cropper-modal { display: none; }
        #cropper-modal.flex { display: flex; }
        .cropper-container { max-width: 90vw; max-height: 80vh; }
        /* Custom scrollbar for preview */
        .preview-panel-content::-webkit-scrollbar { width: 6px; }
        .preview-panel-content::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
        .preview-panel-content::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
        .preview-panel-content::-webkit-scrollbar-thumb:hover { background: #555; }
    </style>
</head>
<body class="text-gray-800">

    <!-- Header -->
    <header class="bg-white/80 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-20">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center py-3">
            <div class="flex items-center gap-2">
                <i data-lucide="file-text" class="text-blue-600 h-7 w-7"></i>
                <h1 class="text-xl font-bold text-gray-900">Resume.io</h1>
            </div>
            <button id="export-word-btn" class="flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <i data-lucide="download" class="mr-2 h-5 w-5"></i>
                <span class="font-medium">Export to Word</span>
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto p-4 sm:p-6 lg:p-8 grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
        
        <!-- Editor Panel -->
        <div class="editor-panel space-y-4">
            <!-- Sections will be dynamically added here -->
        </div>

        <!-- Preview Panel -->
        <div class="preview-panel sticky top-24">
            <div class="template-switcher bg-white p-2 rounded-xl border flex flex-wrap items-center justify-center gap-1 mb-4 shadow-sm">
                <button data-template="modern" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Modern</button>
                <button data-template="professional" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Professional</button>
                <button data-template="creative" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Creative</button>
                <button data-template="technical" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Technical</button>
                <button data-template="entry-level" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Entry-Level</button>
                <button data-template="academic" class="template-btn px-3 py-2 text-sm font-medium rounded-lg capitalize">Academic CV</button>
            </div>
            <div id="resume-preview-container" class="preview-panel-content bg-white text-gray-800 p-8 rounded-xl shadow-lg h-[calc(100vh-12rem)] overflow-y-auto border">
                <div id="resume-preview"></div>
            </div>
        </div>
    </main>

    <!-- Cropper Modal -->
    <div id="cropper-modal" class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-xl">
            <div class="cropper-container mb-4">
                <img id="image-to-crop" src="" alt="Image cropping preview">
            </div>
            <div class="flex justify-end gap-4">
                <button id="cancel-crop-btn" class="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400">Cancel</button>
                <button id="crop-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Crop & Save</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- STATE MANAGEMENT ---
            let resumeData = {
                name: '', title: '', email: '', phone: '', address: '', website: '', linkedin: '', github: '', summary: '', photo: '', apiKey: '',
                experience: [], projects: [], education: [], publications: [], volunteer: [],
                certifications: [], awards: [], skills: [], languages: [], references: ''
            };
            let activeTemplate = 'modern';
            let openAccordion = 'ai-settings';
            let cropper;

            // --- EDITOR SECTIONS DEFINITION ---
            const sections = [
                { id: 'ai-settings', title: 'AI Assistant', icon: 'sparkles', fields: [
                    { id: 'apiKey', placeholder: 'Enter your Gemini API Key here', icon: 'key-round', type: 'password', note: 'Your key is saved in your browser. <a href="https://aistudio.google.com/app/apikey" target="_blank" class="text-blue-600 hover:underline">Get your API key from Google AI Studio.</a>' }
                ]},
                { id: 'personal', title: 'Personal Information', icon: 'user', fields: [
                    { id: 'name', placeholder: 'Full Name', icon: 'user' }, { id: 'title', placeholder: 'Professional Title (e.g., Senior Marketing Manager)', icon: 'briefcase' },
                    { id: 'email', placeholder: 'Email Address', icon: 'mail', type: 'email' }, { id: 'phone', placeholder: 'Phone Number', icon: 'phone', type: 'tel' },
                    { id: 'address', placeholder: 'City, Country (e.g., San Francisco, USA)', icon: 'map-pin' },
                    { id: 'website', placeholder: 'Portfolio/Website URL', icon: 'globe', type: 'url' }, { id: 'linkedin', placeholder: 'LinkedIn Profile URL', icon: 'linkedin', type: 'url' },
                    { id: 'github', placeholder: 'GitHub/Behance/Dribbble URL', icon: 'github', type: 'url' },
                    { id: 'photo', label: 'Profile Photo', type: 'file', accept: 'image/*', note: 'Note: Photos are often not standard for resumes in some industries/regions.' }
                ]},
                { id: 'summary', title: 'Professional Summary', icon: 'pen-square', fields: [{ id: 'summary', type: 'textarea', rows: 5, placeholder: 'A brief, powerful summary of your skills, experience, and career goals. Or, click the button below to generate one with AI!' }] },
                { id: 'experience', title: 'Work Experience', icon: 'briefcase', dynamic: true, template: [ { name: 'position', placeholder: 'Job Title' }, { name: 'company', placeholder: 'Company Name & Location' }, { name: 'years', placeholder: 'e.g., Jan 2020 - Present' }, { name: 'description', placeholder: 'Start each bullet with an action verb. Quantify achievements with numbers (e.g., Increased sales by 15% in Q3).', type: 'textarea', rows: 4 } ] },
                { id: 'skills', title: 'Skills', icon: 'star', dynamic: true, template: [ { name: 'category', placeholder: 'Category (e.g., Technical Skills, Soft Skills)' }, { name: 'list', placeholder: 'Enter skills, comma-separated', type: 'textarea', rows: 2 } ], quickSelect: ['Technical Skills', 'Soft Skills', 'Leadership', 'Marketing', 'Sales', 'Data Analysis', 'UI/UX Design', 'Languages & Frameworks', 'Databases', 'Cloud Platforms', 'Project Management', 'SEO/SEM', 'Content Creation', 'Customer Service'] },
                { id: 'projects', title: 'Projects', icon: 'code-2', dynamic: true, template: [ { name: 'name', placeholder: 'Project Name' }, { name: 'link', placeholder: 'Project Link (optional)' }, { name: 'description', placeholder: 'Describe the project and your role. Highlight technologies used and outcomes achieved.', type: 'textarea', rows: 3 } ] },
                { id: 'education', title: 'Education', icon: 'graduation-cap', dynamic: true, template: [ { name: 'degree', placeholder: 'Degree / Certificate' }, { name: 'institution', placeholder: 'Institution Name' }, { name: 'year', placeholder: 'Year of Completion' }, { name: 'gpa', placeholder: 'GPA (optional)' }, { name: 'coursework', placeholder: 'Relevant Coursework (optional)' } ] },
                { id: 'certifications', title: 'Certifications', icon: 'award', dynamic: true, template: [ { name: 'name', placeholder: 'Certification Name' }, { name: 'issuer', placeholder: 'Issuing Organization' }, { name: 'date', placeholder: 'Date (e.g., May 2025)' } ] },
                { id: 'publications', title: 'Publications', icon: 'book-marked', dynamic: true, template: [ { name: 'title', placeholder: 'Title of Publication' }, { name: 'outlet', placeholder: 'Journal, Conference, or Website' }, { name: 'date', placeholder: 'Publication Date' }, { name: 'link', placeholder: 'Link to Publication (optional)' } ] },
                { id: 'volunteer', title: 'Volunteer Experience', icon: 'heart-handshake', dynamic: true, template: [ { name: 'role', placeholder: 'Your Role' }, { name: 'organization', placeholder: 'Organization Name' }, { name: 'date', placeholder: 'Date(s) of Involvement' }, { name: 'description', placeholder: 'Describe your contributions and impact.', type: 'textarea', rows: 2 } ] },
                { id: 'awards', title: 'Awards & Honors', icon: 'trophy', dynamic: true, template: [ { name: 'name', placeholder: 'Award Name' }, { name: 'awarder', placeholder: 'Awarded by' }, { name: 'date', placeholder: 'Date Received' }, { name: 'summary', placeholder: 'Brief summary of the achievement.', type: 'textarea', rows: 2 } ] },
                { id: 'languages', title: 'Languages', icon: 'languages', dynamic: true, template: [ { name: 'name', placeholder: 'e.g., Spanish' }, { name: 'proficiency', type: 'select', options: ['Basic', 'Conversational', 'Fluent', 'Native'] } ], quickSelect: ['English', 'Spanish', 'Mandarin Chinese', 'French', 'German', 'Hindi', 'Tamil', 'Telugu', 'Bengali', 'Marathi', 'Kannada', 'Japanese', 'Arabic', 'Russian'] },
                { id: 'references', title: 'References', icon: 'contact-2', fields: [{ id: 'references', type: 'textarea', rows: 2, placeholder: 'e.g., Available upon request.' }] },
            ];

            // --- DOM ELEMENTS ---
            const editorPanel = document.querySelector('.editor-panel');
            const previewPanel = document.getElementById('resume-preview');
            const cropperModal = document.getElementById('cropper-modal');
            const imageToCrop = document.getElementById('image-to-crop');

            // --- BUILD EDITOR UI ---
            function buildEditor() {
                sections.forEach(section => {
                    const accordionItem = document.createElement('div');
                    accordionItem.className = 'accordion-item border rounded-xl overflow-hidden bg-white shadow-sm';
                    
                    let contentHTML = '';
                    if (section.fields) {
                        contentHTML += section.fields.map(field => {
                            if (field.type === 'textarea') return `<textarea id="${field.id}" rows="${field.rows}" placeholder="${field.placeholder}" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"></textarea>`;
                            if (field.type === 'file') return `<div class="mt-4"><label for="${field.id}" class="block text-sm font-medium text-gray-700 mb-2">${field.label}</label><input type="${field.type}" id="${field.id}" accept="${field.accept}" class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 cursor-pointer"><p class="text-xs text-gray-500 mt-1">${field.note || ''}</p></div>`;
                            if (field.type === 'password') return `<div class="relative mb-4"><i data-lucide="${field.icon}" class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-5 w-5"></i><input type="${field.type || 'text'}" id="${field.id}" placeholder="${field.placeholder}" class="w-full py-2 pr-3 pl-10 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"><p class="text-xs text-gray-500 mt-1">${field.note || ''}</p></div>`;
                            return `<div class="relative mb-4"><i data-lucide="${field.icon}" class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-5 w-5"></i><input type="${field.type || 'text'}" id="${field.id}" placeholder="${field.placeholder}" class="w-full py-2 pr-3 pl-10 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"></div>`;
                        }).join('');
                    }
                    if (section.id === 'summary') {
                         contentHTML += `<button id="generate-summary-btn" class="mt-4 flex items-center justify-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 w-full font-medium transition-all duration-200"><i data-lucide="sparkles" class="mr-2 h-5 w-5"></i><span>Generate with AI</span></button>`;
                    }
                    if (section.dynamic) {
                        contentHTML += `<div id="${section.id}-list" class="space-y-4"></div><button id="add-${section.id}-btn" class="mt-4 flex items-center justify-center px-4 py-2 bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 w-full font-medium"><i data-lucide="plus-circle" class="mr-2 h-5 w-5"></i><span>Add ${section.title.replace('Work ', '').replace(' & Honors', '')}</span></button>`;
                    }
                    if (section.quickSelect) {
                        contentHTML += `<div class="mt-4"><h4 class="text-sm font-semibold mb-2 text-gray-600">Quick Select:</h4><div id="quick-select-${section.id}" class="flex flex-wrap gap-2"></div></div>`;
                    }

                    accordionItem.innerHTML = `
                        <button class="accordion-header w-full flex justify-between items-center p-4 hover:bg-gray-50 transition" data-accordion="${section.id}">
                            <div class="flex items-center"><i data-lucide="${section.icon}" class="mr-3 text-blue-600 h-5 w-5"></i><h3 class="text-lg font-semibold">${section.title}</h3></div>
                            <i data-lucide="chevron-down" class="accordion-chevron text-gray-500"></i>
                        </button>
                        <div class="accordion-content p-5 bg-gray-50/50 border-t">${contentHTML}</div>`;
                    editorPanel.appendChild(accordionItem);
                });
            }

            // --- LOCAL STORAGE ---
            function saveToLocal() { localStorage.setItem('resumeBuilderProData', JSON.stringify(resumeData)); }
            function loadFromLocal() {
                const savedData = localStorage.getItem('resumeBuilderProData');
                if (savedData) {
                    const parsedData = JSON.parse(savedData);
                    Object.keys(resumeData).forEach(key => {
                        if (parsedData[key] !== undefined) { resumeData[key] = parsedData[key]; }
                    });
                    sections.forEach(section => {
                        if (section.fields) {
                            section.fields.forEach(field => {
                                if (field.type !== 'file' && document.getElementById(field.id) && resumeData[field.id]) {
                                    document.getElementById(field.id).value = resumeData[field.id];
                                }
                            });
                        }
                    });
                    renderAllDynamicSections();
                    updatePreview();
                }
            }
            
            // --- AI SUMMARY GENERATION ---
            async function generateSummaryWithAI() {
                const apiKey = resumeData.apiKey;
                if (!apiKey) {
                    document.querySelector('.accordion-header[data-accordion="ai-settings"]').click();
                    document.getElementById('apiKey').focus();
                    document.getElementById('apiKey').classList.add('ring-2', 'ring-red-500');
                    setTimeout(() => document.getElementById('apiKey').classList.remove('ring-2', 'ring-red-500'), 2000);
                    return;
                }

                const btn = document.getElementById('generate-summary-btn');
                btn.disabled = true;
                btn.innerHTML = `<i data-lucide="loader-2" class="mr-2 h-5 w-5 animate-spin"></i><span>Generating...</span>`;
                lucide.createIcons();

                const skillsList = resumeData.skills.map(s => `${s.category}: ${s.list}`).join('; ');
                const experienceList = resumeData.experience.map(e => `- ${e.position} at ${e.company}`).join('\n');
                const userPrompt = `Act as a world-class professional resume writer. Based on the following details, write a compelling, professional, and concise summary for a resume in 3 to 4 sentences.\n\n**Professional Title:** ${resumeData.title || 'Not specified'}\n**Key Skills:** ${skillsList || 'Not specified'}\n**Recent Experience:**\n${experienceList || 'Not specified'}\n\nThe summary should be tailored to highlight the candidate's key strengths and career ambitions. Do not use markdown or special formatting.`;
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ contents: [{ parts: [{ text: userPrompt }] }] })
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error.message || `API request failed with status ${response.status}`);
                    }
                    const result = await response.json();
                    const summaryText = result.candidates?.[0]?.content?.parts?.[0]?.text;
                    if (summaryText) {
                        const summaryTextarea = document.getElementById('summary');
                        summaryTextarea.value = summaryText.trim();
                        summaryTextarea.dispatchEvent(new Event('input', { bubbles: true }));
                    } else {
                         throw new Error("Received an empty response from the AI.");
                    }
                } catch (error) {
                    console.error('Error generating summary:', error);
                    alert(`Failed to generate summary: ${error.message}. Please check your API key and network connection.`);
                } finally {
                    btn.disabled = false;
                    btn.innerHTML = `<i data-lucide="sparkles" class="mr-2 h-5 w-5"></i><span>Generate with AI</span>`;
                    lucide.createIcons();
                }
            }

            // --- DYNAMIC SECTION RENDERING ---
            function renderAllDynamicSections() { sections.filter(s => s.dynamic).forEach(s => renderDynamicSection(s.id)); }
            function renderDynamicSection(type) {
                const container = document.getElementById(`${type}-list`);
                const sectionTemplate = sections.find(s => s.id === type).template;
                if (!container) return;
                container.innerHTML = '';
                (resumeData[type] || []).forEach((item, index) => {
                    const div = document.createElement('div');
                    div.className = 'p-4 border bg-white rounded-lg relative space-y-3';
                    let innerHTML = sectionTemplate.map(field => {
                        const value = item[field.name] || '';
                        if (field.type === 'textarea') return `<textarea data-type="${type}" data-index="${index}" name="${field.name}" rows="${field.rows}" placeholder="${field.placeholder}" class="w-full p-2 border rounded-md">${value}</textarea>`;
                        if (field.type === 'select') {
                            const options = field.options.map(opt => `<option value="${opt}" ${value === opt ? 'selected' : ''}>${opt}</option>`).join('');
                            return `<select data-type="${type}" data-index="${index}" name="${field.name}" class="w-full p-2 border rounded-md bg-white">${options}</select>`;
                        }
                        return `<input type="text" data-type="${type}" data-index="${index}" name="${field.name}" value="${value}" placeholder="${field.placeholder}" class="w-full p-2 border rounded-md">`;
                    }).join('');
                    div.innerHTML = innerHTML + `<button class="remove-btn absolute top-2 right-2 text-red-400 hover:text-red-600" data-type="${type}" data-index="${index}" title="Remove item"><i data-lucide="x-circle" class="h-5 w-5"></i></button>`;
                    container.appendChild(div);
                });
                lucide.createIcons();
            }

            // --- PREVIEW & EXPORT LOGIC ---
            function generateExportHtml() {
                const sanitize = (str) => (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                const formatText = (text) => sanitize(text).replace(/\n/g, '<br />');
                let html = `<div style="font-family: Arial, sans-serif; font-size: 10pt;"><div style="text-align: center; margin-bottom: 20px;"><h1 style="font-size: 24pt; font-weight: bold; margin: 0;">${sanitize(resumeData.name)}</h1><p style="font-size: 14pt; color: #333; margin: 5px 0;">${sanitize(resumeData.title)}</p><p style="font-size: 10pt; color: #555;">${[resumeData.phone, resumeData.email, resumeData.address, resumeData.website, resumeData.linkedin, resumeData.github].filter(Boolean).map(val => sanitize(val)).join(' | ')}</p></div>`;
                const createSection = (title, content) => content ? `<h2 style="font-size: 14pt; font-weight: bold; border-bottom: 1px solid #ccc; padding-bottom: 4px; margin-top: 16px; margin-bottom: 8px;">${title}</h2>${content}` : '';
                html += createSection('Summary', `<p>${formatText(resumeData.summary)}</p>`);
                const expContent = (resumeData.experience || []).map(exp => `<div style="margin-bottom: 12px;"><h3 style="font-size: 11pt; font-weight: bold; margin: 0;">${sanitize(exp.position)}</h3><p style="font-size: 10pt; font-style: italic; color: #555; margin: 2px 0;">${sanitize(exp.company)} | ${sanitize(exp.years)}</p><div style="font-size: 10pt; padding-left: 15px;">${formatText(exp.description).replace(/<br \/>/g, '<br />&bull; ').replace(/^/, '&bull; ')}</div></div>`).join('');
                html += createSection('Work Experience', expContent);
                const skillsContent = (resumeData.skills || []).map(skill => `<div style="margin-bottom: 8px;"><h3 style="font-size: 11pt; font-weight: bold; margin: 0;">${sanitize(skill.category)}</h3><p style="font-size: 10pt;">${sanitize(skill.list)}</p></div>`).join('');
                html += createSection('Skills', skillsContent);
                const projectsContent = (resumeData.projects || []).map(p => `<div style="margin-bottom:12px;"><h3 style="font-size:11pt;font-weight:bold;">${sanitize(p.name)}</h3><p>${formatText(p.description)}</p></div>`).join('');
                html += createSection('Projects', projectsContent);
                const eduContent = (resumeData.education || []).map(e => `<div style="margin-bottom:12px;"><h3 style="font-size:11pt;font-weight:bold;">${sanitize(e.degree)}</h3><p>${sanitize(e.institution)} - ${sanitize(e.year)}</p></div>`).join('');
                html += createSection('Education', eduContent);
                html += '</div>';
                return html;
            }

            function updatePreview() {
                const sanitize = (str) => (str || '').replace(/</g, "&lt;").replace(/>/g, "&gt;");
                const formatText = (text) => sanitize(text).replace(/\n/g, '<br>');
                const createSectionHTML = (title, items, formatter, gridClass = '') => (!items || items.length === 0) ? '' : `<div class="section mt-6"><h2 class="section-title text-xl font-bold border-b-2 border-gray-300 pb-2 mb-4">${title}</h2><div class="${gridClass}">${items.map(formatter).join('')}</div></div>`;
                const expHtml = (exp) => `<div class="mb-5"><h3 class="text-lg font-semibold text-gray-800">${sanitize(exp.position)}</h3><p class="font-medium text-gray-600">${sanitize(exp.company)} <span class="text-sm text-gray-500 float-right">${sanitize(exp.years)}</span></p><ul class="mt-2 list-disc list-inside text-gray-700 text-sm space-y-1">${(exp.description || '').split('\n').map(line => `<li>${sanitize(line)}</li>`).join('')}</ul></div>`;
                const skillsHtml = (skill) => `<div class="mb-3"><h3 class="font-semibold text-gray-700">${sanitize(skill.category)}</h3><p class="text-sm text-gray-600">${sanitize(skill.list)}</p></div>`;
                const projectHtml = (p) => `<div class="mb-5"><h3 class="text-lg font-semibold">${sanitize(p.name)}</h3>${p.link ? `<a href="${sanitize(p.link)}" target="_blank" class="text-sm text-blue-600 hover:underline break-all">${sanitize(p.link)}</a>` : ''}<p class="text-gray-700 text-sm mt-1">${formatText(p.description)}</p></div>`;
                const eduHtml = (e) => `<div class="mb-4"><h3 class="text-lg font-semibold">${sanitize(e.degree)}</h3><p class="text-gray-600">${sanitize(e.institution)}</p><p class="text-sm text-gray-500">${sanitize(e.year)}</p>${e.gpa ? `<p class="text-xs text-gray-500">GPA: ${sanitize(e.gpa)}</p>` : ''}${e.coursework ? `<p class="text-xs text-gray-500">Courses: ${sanitize(e.coursework)}</p>`: ''}</div>`;
                const certHtml = (c) => `<div class="mb-4"><h3 class="font-semibold">${sanitize(c.name)}</h3><p class="text-sm text-gray-600">${sanitize(c.issuer)} - ${sanitize(c.date)}</p></div>`;
                const pubHtml = (p) => `<div class="mb-4"><h3 class="font-semibold">${sanitize(p.title)}</h3><p class="text-sm text-gray-600">${sanitize(p.outlet)} - ${sanitize(p.date)}</p>${p.link ? `<a href="${sanitize(p.link)}" target="_blank" class="text-xs text-blue-600 hover:underline">View Publication</a>` : ''}</div>`;
                const volHtml = (v) => `<div class="mb-4"><h3 class="font-semibold">${sanitize(v.role)} at ${sanitize(v.organization)}</h3><p class="text-sm text-gray-500">${sanitize(v.date)}</p><p class="text-xs mt-1 text-gray-600">${formatText(v.description)}</p></div>`;
                const awardHtml = (a) => `<div class="mb-4"><h3 class="font-semibold">${sanitize(a.name)}</h3><p class="text-sm text-gray-600">${sanitize(a.awarder)} - ${sanitize(a.date)}</p><p class="text-xs mt-1 text-gray-600">${formatText(a.summary)}</p></div>`;
                const langHtml = (l) => `<p class="text-sm"><span class="font-semibold">${sanitize(l.name)}:</span> ${sanitize(l.proficiency)}</p>`;
                const sectionsHtml = {
                    summary: resumeData.summary ? `<div class="section"><p class="text-gray-700 text-sm">${formatText(resumeData.summary)}</p></div>` : '',
                    experience: createSectionHTML('Work Experience', resumeData.experience, expHtml),
                    skills: createSectionHTML('Skills', resumeData.skills, skillsHtml, 'grid grid-cols-1 md:grid-cols-2 gap-x-8'),
                    projects: createSectionHTML('Projects', resumeData.projects, projectHtml),
                    education: createSectionHTML('Education', resumeData.education, eduHtml),
                    certifications: createSectionHTML('Certifications', resumeData.certifications, certHtml),
                    publications: createSectionHTML('Publications', resumeData.publications, pubHtml),
                    volunteer: createSectionHTML('Volunteer Experience', resumeData.volunteer, volHtml),
                    awards: createSectionHTML('Awards & Honors', resumeData.awards, awardHtml),
                    languages: createSectionHTML('Languages', resumeData.languages, langHtml),
                    references: resumeData.references ? createSectionHTML('References', [{ref: resumeData.references}], (r) => `<p class="text-sm text-gray-600">${formatText(r.ref)}</p>`) : ''
                };
                let contactInfo = [resumeData.phone, resumeData.email, resumeData.address].filter(Boolean).map(val => `<span>${sanitize(val)}</span>`).join('<span class="mx-1.5">|</span>');
                let webLinks = [resumeData.website, resumeData.linkedin, resumeData.github].filter(Boolean).map(val => `<a href="${sanitize(val)}" class="hover:underline">${sanitize(val.replace(/https?:\/\//, ''))}</a>`).join('<span class="mx-1.5">|</span>');
                let templateHtml = '';
                switch (activeTemplate) {
                    case 'professional': templateHtml = `<div class="professional-template font-serif"><header class="text-center pb-4 mb-4 border-b-2 border-gray-800"><h1 class="text-4xl font-bold tracking-wider">${sanitize(resumeData.name)}</h1><p class="text-lg text-gray-600">${sanitize(resumeData.title)}</p></header><div class="text-center text-xs text-gray-600 mb-6">${contactInfo}<br>${webLinks}</div>${Object.values(sectionsHtml).join('')}</div>`; break;
                    case 'creative': templateHtml = `<div class="grid grid-cols-12 gap-8"><div class="col-span-4 bg-gradient-to-b from-blue-700 to-blue-900 text-white p-6 rounded-lg space-y-6">${resumeData.photo ? `<img src="${resumeData.photo}" class="rounded-full w-32 h-32 mx-auto mb-4 object-cover border-4 border-white/50 shadow-lg">` : ''}<div class="text-center"><h1 class="text-3xl font-bold">${sanitize(resumeData.name)}</h1><p class="text-blue-200">${sanitize(resumeData.title)}</p></div><div class="space-y-3 text-sm"><div><h3 class="font-bold text-blue-200 uppercase tracking-wider mb-1">Contact</h3><p>${sanitize(resumeData.phone)}</p><p class="break-words">${sanitize(resumeData.email)}</p><p>${sanitize(resumeData.address)}</p>${[resumeData.website, resumeData.linkedin, resumeData.github].filter(Boolean).map(val => `<a href="${sanitize(val)}" class="block break-words text-blue-300 hover:text-white">${sanitize(val.replace(/https?:\/\//, ''))}</a>`).join('')}</div></div>${sectionsHtml.skills.replace(/section-title/g, 'font-bold text-blue-200 uppercase tracking-wider').replace(/text-gray-700/g,'text-white').replace(/text-gray-600/g,'text-blue-100')}${sectionsHtml.education.replace(/section-title/g, 'font-bold text-blue-200 uppercase tracking-wider').replace(/text-gray-800/g,'text-white').replace(/text-gray-600/g,'text-blue-100')}${sectionsHtml.languages.replace(/section-title/g, 'font-bold text-blue-200 uppercase tracking-wider').replace(/text-gray-700/g,'text-blue-100')}</div><div class="col-span-8 py-6">${sectionsHtml.summary.replace('section', 'section mb-6')}${sectionsHtml.experience}${sectionsHtml.projects}${sectionsHtml.certifications}${sectionsHtml.volunteer}${sectionsHtml.awards}${sectionsHtml.publications}</div></div>`; break;
                    case 'technical': case 'academic': case 'entry-level': templateHtml = `<div class="grid grid-cols-12 gap-8"><div class="col-span-4 bg-gray-100 p-6 rounded-lg space-y-6">${resumeData.photo ? `<img src="${resumeData.photo}" class="rounded-lg w-full object-cover shadow-md">` : ''}<div class="text-left mt-4"><h1 class="text-3xl font-bold text-gray-800">${sanitize(resumeData.name)}</h1><p class="text-gray-600">${sanitize(resumeData.title)}</p></div><div class="space-y-3 text-sm"><div><h3 class="font-bold text-gray-500 uppercase tracking-wider mb-2 border-b pb-1">Contact</h3><p>${sanitize(resumeData.phone)}</p><p class="break-words">${sanitize(resumeData.email)}</p><p>${sanitize(resumeData.address)}</p>${[resumeData.website, resumeData.linkedin, resumeData.github].filter(Boolean).map(val => `<a href="${sanitize(val)}" class="block break-words text-blue-600 hover:underline">${sanitize(val.replace(/https?:\/\//, ''))}</a>`).join('')}</div></div>${sectionsHtml.skills}${sectionsHtml.education}${sectionsHtml.languages}${sectionsHtml.references}</div><div class="col-span-8 py-6">${sectionsHtml.summary.replace('section', 'section mb-6')}${activeTemplate === 'entry-level' ? sectionsHtml.education : ''}${sectionsHtml.experience}${sectionsHtml.projects}${sectionsHtml.publications}${sectionsHtml.certifications}${sectionsHtml.volunteer}${sectionsHtml.awards}</div></div>`; break;
                    default: templateHtml = `<header class="text-center mb-8"><h1 class="text-5xl font-extrabold text-slate-900">${sanitize(resumeData.name)}</h1><p class="text-xl text-blue-700 font-light mt-1">${sanitize(resumeData.title)}</p><div class="text-sm text-gray-500 mt-4">${contactInfo}</div><div class="text-sm text-blue-600 mt-1">${webLinks}</div></header>${sectionsHtml.summary}${sectionsHtml.experience}${sectionsHtml.skills}${sectionsHtml.projects}<div class="grid grid-cols-1 md:grid-cols-2 gap-x-8">${sectionsHtml.education}${sectionsHtml.certifications}${sectionsHtml.publications}${sectionsHtml.volunteer}${sectionsHtml.awards}${sectionsHtml.languages}</div>${sectionsHtml.references}`; break;
                }
                previewPanel.innerHTML = templateHtml;
            }

            // --- EVENT LISTENERS ---
            editorPanel.addEventListener('input', (e) => {
                const { id, value, name, dataset, type } = e.target;
                if (type === 'file' && id === 'photo') {
                    if (e.target.files && e.target.files[0]) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                            cropperModal.classList.add('flex');
                            imageToCrop.src = event.target.result;
                            if (cropper) cropper.destroy();
                            cropper = new Cropper(imageToCrop, { aspectRatio: 1, viewMode: 1, background: false });
                        };
                        reader.readAsDataURL(e.target.files[0]);
                    }
                } else if (id && resumeData.hasOwnProperty(id)) {
                    resumeData[id] = value;
                } else if (name && dataset.index != null && resumeData[dataset.type]) {
                    resumeData[dataset.type][dataset.index][name] = value;
                }
                saveToLocal();
                updatePreview();
            });
            
            editorPanel.addEventListener('click', (e) => {
                const button = e.target.closest('button');
                if (!button) return;
                if (button.id === 'generate-summary-btn') { generateSummaryWithAI(); return; }
                if (button.classList.contains('accordion-header')) {
                    const accordionName = button.dataset.accordion;
                    openAccordion = (openAccordion === accordionName) ? null : accordionName;
                    document.querySelectorAll('.accordion-item').forEach(item => {
                        const name = item.querySelector('.accordion-header').dataset.accordion;
                        item.querySelector('.accordion-content').classList.toggle('open', name === openAccordion);
                        item.querySelector('.accordion-chevron').classList.toggle('rotate-180', name === openAccordion);
                    });
                    return;
                }
                if (button.id && button.id.startsWith('add-')) {
                    const sectionId = button.id.replace('add-', '').replace('-btn', '');
                    const section = sections.find(s => s.id === sectionId);
                    if (section && section.dynamic) {
                        resumeData[section.id] = resumeData[section.id] || [];
                        const newItem = section.id === 'languages' ? { proficiency: 'Fluent' } : {};
                        resumeData[section.id].push(newItem);
                        renderDynamicSection(section.id);
                    }
                } else if (button.classList.contains('remove-btn')) {
                    const { type, index } = button.dataset;
                    if(resumeData[type] && resumeData[type][index] !== undefined) {
                        resumeData[type].splice(index, 1);
                        renderDynamicSection(type);
                    }
                } else { return; }
                saveToLocal();
                updatePreview();
            });

            document.querySelector('.template-switcher').addEventListener('click', (e) => {
                const target = e.target.closest('.template-btn');
                if (target) {
                    activeTemplate = target.dataset.template;
                    document.querySelectorAll('.template-btn').forEach(btn => btn.classList.remove('bg-blue-600', 'text-white', 'shadow'));
                    target.classList.add('bg-blue-600', 'text-white', 'shadow');
                    updatePreview();
                }
            });
            
            document.getElementById('crop-btn').addEventListener('click', () => {
                if(!cropper) return;
                resumeData.photo = cropper.getCroppedCanvas({ width: 256, height: 256 }).toDataURL('image/jpeg');
                cropper.destroy(); cropper = null;
                cropperModal.classList.remove('flex');
                document.getElementById('photo').value = '';
                saveToLocal(); updatePreview();
            });
            document.getElementById('cancel-crop-btn').addEventListener('click', () => {
                if(!cropper) return;
                cropper.destroy(); cropper = null;
                cropperModal.classList.remove('flex');
                document.getElementById('photo').value = '';
            });
            document.getElementById('export-word-btn').addEventListener('click', () => {
                const content = generateExportHtml();
                const blob = htmlDocx.asBlob(content, { orientation: 'portrait', margins: { top: 720, right: 720, bottom: 720, left: 720 } });
                const url = URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `Resume - ${resumeData.name || 'Candidate'}.docx`;
                document.body.appendChild(a); a.click();
                document.body.removeChild(a); URL.revokeObjectURL(url);
            });

            function populateQuickSelect() {
                sections.forEach(section => {
                    if (section.quickSelect) {
                        const container = document.getElementById(`quick-select-${section.id}`);
                        if (!container) return;
                        section.quickSelect.forEach(item => {
                            const button = document.createElement('button');
                            button.className = 'quick-select-btn px-2 py-1 bg-gray-200 text-gray-700 text-xs rounded-md hover:bg-gray-300 transition';
                            button.textContent = item;
                            button.onclick = () => {
                                 if (section.id === 'skills' && !resumeData[section.id].some(s => s.category.toLowerCase() === item.toLowerCase())) {
                                    resumeData[section.id].push({ category: item, list: '' });
                                } else if (section.id === 'languages' && !resumeData.languages.some(l => l.name.toLowerCase() === item.toLowerCase())) {
                                    resumeData.languages.push({ name: item, proficiency: 'Fluent' });
                                }
                                renderDynamicSection(section.id); saveToLocal(); updatePreview();
                            };
                            container.appendChild(button);
                        });
                    }
                });
            }

            // --- INITIALIZATION ---
            buildEditor();
            lucide.createIcons();
            populateQuickSelect();
            loadFromLocal();
            document.querySelector(`.template-btn[data-template="${activeTemplate}"]`)?.click();
            document.querySelector(`.accordion-header[data-accordion="${openAccordion}"]`)?.click();
        });
    </script>
</body>
</html>

